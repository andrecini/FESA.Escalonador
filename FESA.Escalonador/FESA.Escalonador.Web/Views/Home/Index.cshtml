@model Resultado

@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="https://jsuites.net/v4/jsuites.css" type="text/css" />



<div class="card">
    <form id="form" asp-action="Calcular" asp-controller="Home" class="card-body">

        <select id="Tipo" class="form-select w-auto mb-3" aria-label="Tipo">
            <option value="0" selected>Selecione uma Opção</option>
            <option value="1">FCFS</option>
            <option value="2">SJF</option>
            <option value="3">RR</option>
            <option value="4">SRTF</option>
            <option value="5">PRIOc</option>
            <option value="6">PRIOp</option>
        </select>

        <div class="row align-items-end g-2">
            <div class="col">
                <label for="Chegada" class="form-label">Chegada</label>
                <input type="number" class="form-control" id="Chegada" placeholder="Digite o tempo de chegada" min="0" value="0" disabled>
            </div>
            <div class="col">
                <label for="Chegada" class="form-label">Tempo de Execucao</label>
                <input type="number" class="form-control" id="Tamanho" placeholder="Digite o tempo de execução" min="1">
            </div>
            <div class="col">
                <label for="Prioridade" class="form-label">Prioridade</label>
                <input type="number" class="form-control" id="Prioridade" placeholder="Digite a prioridade" min="1">
            </div>
            <div class="col-auto">
                <input type="button" class="btn btn-primary" value="Adicionar" onclick="adicionarLinha()" />
            </div>
            <div class="col-auto">
                <input type="submit" class="btn btn-success" value="Calcular" />
            </div>

            <div id="inputsHiddenContainer">
                <input type="hidden" id="TipoHidden" name="tipo" value="0" />
                <!-- Os inputs hidden dinâmicos serão adicionados aqui -->
            </div>

        </div>
    </form>

    <div id="dados" class="card-body align-items-center g-2 d-none">
        <table id="tabela" class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Chegada</th>
                    <th scope="col">Tempo de Execução</th>
                    <th scope="col">Prioridade</th>
                </tr>
            </thead>
            <tbody>
                @* Feito Dinamicamente >= site.js *@
            </tbody>
        </table>

        <div class="d-flex w-100 justify-content-end">
            <input type="button" class="btn btn-danger" value="Limpar" onclick="limparDados()" />
        </div>
    </div>
</div>

@if (Model != null)
{
    <br />
    <h2> Respostas </h2>

    if (Model.DadosExecucoes != null && Model.DadosExecucoes.Count() > 0)
    {
        <div class="d-flex justify-content-center">
            <div class="row align-items-start g-2 my-4">
                <div class="col-auto">
                    <div class="d-flex align-items-center justify-content-center flex-column">
                        <h5 class="m-0 p-0">|</h5>
                        <span>0</span>
                    </div>
                </div>

                @for (int i = 0; i < Model.Resumo.Processos.Count(); i++)
                {
                    <div class="col-auto">
                        <h5>@Model.Resumo.Processos.ElementAt(i)</h5>
                    </div>

                    <div class="col-auto">
                        <div class="d-flex align-items-center justify-content-center flex-column">
                            <h5 class="m-0 p-0">|</h5>
                            <span>@Model.Resumo.Tempos.ElementAt(i + 1)</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div id="chart">
            <div id="eixo-y">
                @{
                    var quantidadeProcessos = Model.DadosGrafico.ExecucoesAlinhadas.Count();
                }

                @for (int i = quantidadeProcessos; i > 0; i--)
                {
                    <span class="label-processo">@($"P{i}")</span>
                }
            </div>

            <div class="d-flex flex-column w-100">
                @foreach (var dadosGrafico in Model.DadosGrafico.ExecucoesAlinhadas)
                {
                    <div class="w-100 processo">
                        @{
                            var inativo = dadosGrafico.ExecucaoGrafico.PorcentagemInatividade.ToString().Replace(',', '.');
                        }

                        <div id="inativo" class="bloco inativo" style="width: @inativo% !important"></div>
                        @for (int i = 0; i < dadosGrafico.ExecucaoGrafico.PorcentagensEspera.Count(); i++)
                        {
                            var espera = dadosGrafico.ExecucaoGrafico.PorcentagensEspera[i];
                            var chegada = dadosGrafico.ExecucaoGrafico.PorcentagensExecucoes[i];
                            <div id="chegada" class="bloco espera" style="width: @espera.ToString().Replace(',', '.')% !important"></div>
                            <div id="espera" class="bloco execucao" style="width: @chegada.ToString().Replace(',', '.')% !important"></div>
                        }
                    </div>
                }
                <div id="eixo-x">
                    @{
                        var tamanho = Model.DadosGrafico.ValorTempoEmPorcentagem;
                    }

                    @for (int i = 1; i <= Model.DadosGrafico.Quantidade; i++)
                    {
                        @if (i == 1)
                        {
                            <div class="d-flex justify-content-between" style="width: calc(100% / @Model.DadosGrafico.Quantidade) !important">
                                <p>0</p>
                                <p>@i</p>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-end" style="width: calc(100% / @Model.DadosGrafico.Quantidade) !important">
                                <p>@i</p>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Tempo de Término</th>
                    <th scope="col">Ativo</th>
                    <th scope="col">Espera</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dados in Model.DadosExecucoes)
                {
                    <tr>
                        <th scope="row">@dados.Processo</th>
                        <td>@dados.Termino</td>
                        <td>@dados.Ativo</td>
                        <td>@dados.Espera</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="card">
            <div class="card-body">
                <h5><b>Tempo de Execução Médio (Te):</b> @Model.TempoMedioExecucao segundos</h5>
                <h5><b>Tempo de Espera Médio (Tw):</b> @Model.TempoMedioEspera segundos</h5>
            </div>
        </div>
    }
}

@Html.Hidden("urlCalcular", Url.Action("Calcular", "Home"))


<script src="https://jsuites.net/v4/jsuites.js"></script>